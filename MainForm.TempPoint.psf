<File version="3.1">
  <FileID>d7e5f40a-ca10-480f-b3f8-626d6af3434c</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		if (-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($listboxVMUpdateList.Items)
		{
			return $true
		}
		
		return $false
	}
	#Add more pages here
	
	return $false
}

function Enable-UpdateButton
{
	if ($radiobuttonModifyACLs.Checked)
	{
		if ($global:updateCred -and $listboxVMUpdateList.Items -and $radiobuttonModifyACLs.Checked)
		{
			$buttonRun.Enabled = $true
			$buttonRun.BackColor = 'Green'
		}
		else
		{
			$buttonRun.Enabled = $false
			$buttonRun.BackColor = 'Red'
		}
		
		$buttonRun.Text = "Modify ACLs"
		
		$comboboxVMFolders.Enabled = $true
		$comboboxDatacenter.Enabled = $true
		$labelStep2.Text = "Step 2: Select VMs to modify ACLs."
		
		if (-not ($comboboxVMFolders.Items))
		{
			# Clear the items in the VM folder combobox.
			
			$comboboxVMFolders.Items.Clear()
			
			# Here, we determine the built-in 'vm' folder's ID so we can exclude it from the list.
			
			$parentID = ""
			$folder1 = Get-Folder -Type VM -Name vm -Location (Get-Datacenter $comboboxDatacenter.Text)
			
			if ($folder1.ParentID -eq (Get-Datacenter).Id)
			{
				$parentID = $folder1.Id
			}
			
			# Now, let's grab all the folders and list them (excluding sub-folders).
			
			$folders = Get-Folder -Type VM | ?{ $_.ParentId -eq $parentID } | Select Name | Sort-Object | % { $comboboxVMFolders.Items.Add($_.Name) }
		}
	}
	elseif ($comboboxDatacenter.Text -and $radiobuttonRunFullReport.Checked)
	{
		$buttonRun.Enabled = $true
		
		$buttonRun.Text = "Run Report"
		$buttonRun.BackColor = 'Green'
		
		$listboxVMList.Items.Clear()
		$listboxVMUpdateList.Items.Clear()
		
		$comboboxVMFolders.Enabled = $false
		$comboboxVMFolders.Items.Clear()
		
		$comboboxDatacenter.Enabled = $false
		
		$labelStep2.Text = "Step 2: Run report against the logged on vCenter."
	}
	else
	{
		$buttonRun.Enabled = $false
		$buttonRun.BackColor = 'Red'
	}
}


$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMToolsMitigation_Load={
	Update-NavButtons
	
	[bool]$nonNumberEntered = $false
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
	if ($global:vcServer)
	{
		$vcenterTextbox.Text = $global:vcServer
		$vcenterTextbox.Enabled = $false
	}
	
	if ($global:vcCredential)
	{
		$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru
		try
		{
			$global:vcenterConnection = Connect-VIServer -Server $global:vcServer -Credential $global:vcCredential -ErrorAction Stop
			
			if ($global:vcenterConnection.IsConnected)
			{
				$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
				$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
				$labelConnectionStatusNotC.Text = "Connection Status: Connected"
				$labelOKStep1.Visible = $true
				
				$buttonEnterCredentials.Enabled = $false
				
				$rootDCs = Get-Datacenter -Server $global:vcenterConnection.Name | Sort-Object Name
				
				$rootDCs | Out-File "$logDirectory\dcs.log"
				
				foreach ($root in $rootDCs)
				{
					$comboboxDatacenter.Items.Add($root.Name)
				}
				
				Stop-Process $waitProcess.Id
				$tabcontrolWizard.SelectedTab = $tabpageStep2
				Update-NavButtons
			}
		}
		catch
		{
			Stop-Process $waitProcess.Id
			[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
			$vcenterTextbox.Enabled = $true
			$buttonEnterCredentials.Enabled = $false
		}
	}
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$connected = $false
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -Message "Please enter your vSphere credentials." -ErrorAction Stop
		$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		$vcenterTextbox.Enabled = $false
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		$rootDCs = Get-Datacenter -Server $global:vcenterConnection.Name | Sort-Object Name
		
		foreach ($root in $rootDCs)
		{
			$comboboxDatacenter.Items.Add($root.Name)
		}
		
		Stop-Process -Id $waitProcess.Id
		Update-NavButtons
		
	}
	else
	{
		Stop-Process -Id $waitProcess.Id
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

$vcenterTextbox_TextChanged={
	
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

#endregion

$buttonAddVirtualMachines_Click={
	
	$checkboxSelectAll.Checked = $false
	
	# Check to see if all items are selected. If SelectedItems property of the listBox is blank, assume all items.
	if ($listboxVMList.SelectedItems)
	{
		foreach ($item in $listboxVMList.SelectedItems)
		{
			if ($item -notin $listboxVMUpdateList.Items)
			{
				Update-ListBox -ListBox $listboxVMUpdateList -Items $item -Append
			}
		}
	}
	else
	{
		foreach ($item in $listboxVMList.Items)
		{
			if ($item -notin $listboxVMUpdateList.Items)
			{
				Update-ListBox -ListBox $listboxVMUpdateList -Items $item -Append
			}
		}
	}
	
	$buttonDeleteVMFromQueue.Enabled = $true
	
	Enable-UpdateButton
	
	Update-NavButtons
	
}

$buttonDeleteVMFromQueue_Click={
	
	$index = $listboxVMUpdateList.SelectedIndex
	$listboxVMUpdateList.Items.RemoveAt($index)
	
	if (-not $listboxVMUpdateList.Items)
	{
		$buttonDeleteVMFromQueue.Enabled = $false
		Enable-UpdateButton
	}
	else
	{
		$listboxVMUpdateList.SelectedIndex = 0
	}
	
	Update-NavButtons
}

$listviewVMsStep2_SelectedIndexChanged={
	
	$buttonDeleteVMFromQueue.Enabled = $true
	
}

$buttonRun_Click={
	
	$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru
	$buttonRun.Enabled = $false
	
	$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
	$userName = $env:USERNAME
	$archiveName = ""
	
	try
	{
		$vmList = $listboxVMUpdateList.Items
		$vmList | Out-File "$logDirectory\vmlist.log"
		
		if ($radiobuttonModifyACLs.Checked)
		{
			foreach ($vm in $vmList)
			{
				while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 25)
				{
					# We're going to iterate through the running jobs and kill any that have been running for X minutes.
					# This block is ignored if there are less than 5 total builds. We'll handle that part later.
					
					Write-Host "Waiting for open thread...($NumJobs Maximum)"
					Start-Sleep -Seconds 2
				}
				
				Start-Job -Name $vm -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $ScriptDirectory, `
						  $logDirectory, $vm, $global:updateCred -Verbose -ScriptBlock {
					
					Import-Module VMware.PowerCLI
					$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
					
					if ($args[6].Checked)
					{
						Invoke-VMScript -VM (Get-VM $args[4]) -GuestCredential $args[5] -ScriptText {
							if (-not (Get-Item -Path "C:\Scripts"))
							{
								New-Item -ItemType Directory -Path "C:\" -Name "Scripts"
							}
							
							if (-not (Get-Item -Path "C:\Scripts\vmtoolslog"))
							{
								New-Item -ItemType Directory -Path "C:\Scripts" -Name "vmtoolslog"
							}
						}
						
						Invoke-VMScript -VM (Get-VM $args[4]) -GuestCredential $args[5] -ScriptText {
							
							$scriptString = '
					
							$domain = $ENV:USERDOMAIN
							$dir = "C:\ProgramData\VMware\VMware CAF"
							$logdir = "C:\Scripts\vmtoolslog"
							$compName = (Get-ComputerInfo).CsDnsHostName
							$acl = Get-ACL $dir
							$acl.SetAccessRuleProtection($True, $True)
							Set-ACL -AclObject $acl -Path $dir -confirm:$false
							
							$acl2 = Get-ACL $dir
							foreach ($access in $acl2.Access)
							{
								foreach ($value in $access.IdentityReference.Value)
								{
									if (($value -eq "BUILTIN\USERS") `
										-or ($value -eq "$domain\Users"))
									{
										$acl2.RemoveAccessRule($access)
									}
								}
							}

							Set-ACL -AclObject $acl2 -Path $dir -confirm:$false					
							'
							
							$scriptString | Out-File "C:\Scripts\ModifyACLs.ps1" -Force
							
							Set-Location -Path "C:\Scripts"
							
							if (-not (Get-Item -Path 'C:\ProgramData\VMware\VMware CAF' -ErrorAction Continue))
							{
								mkdir 'C:\ProgramData\VMware\VMware CAF'
							}
							
							(Get-Acl -Path 'C:\ProgramData\VMware\VMware CAF').Access
							
							# Specify the account to run the script
							$User = "NT AUTHORITY\SYSTEM"
							# Specify what program to run and with its parameters
							$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-NonInteractive -NoLogo -NoProfile -ExecutionPolicy Bypass C:\Scripts\ModifyACLs.ps1"
							# Specify the name of the task
							Register-ScheduledTask -TaskName "ModifyVMACLs" -User $User -Action $Action -RunLevel Highest –Force -ErrorAction Stop
							
							Start-ScheduledTask -TaskName "ModifyVMACLs" -ErrorAction Stop
							
							while ((Get-ScheduledTask -TaskName "ModifyVMACLs").State -ne "Ready")
							{
								Start-Sleep -Seconds 1
							}
							
							Unregister-ScheduledTask -TaskName "ModifyVMACLs" -Confirm:$false
							
							(Get-Acl -Path 'C:\ProgramData\VMware\VMware CAF').Access
							
						}
					}
					Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
					
				} # End Start-Job block
				
			} # End foreach loop
		} # End IF statement
		elseif ($radiobuttonRunFullReport.Checked)
		{
			Get-VM | ?{ $_.Guest -like "*windows*" } | Select-Object -Property Name, @{ Name = 'ToolsVersion'; Expression = { $_.Guest.ToolsVersion } } | Export-CSV "$logDirectory\VMWareToolsReport.csv" -NoTypeInformation
		}
		
		# We'll kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data = Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			$job.Name | Out-File "$logDirectory\combined_jobresult.log" -Append
			$data | Out-File "$logDirectory\combined_jobresult.log" -Append
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
		}
		
		Stop-Process -Id $waitProcess.Id
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("VM Tools mitigation steps completed.")
			$formVMToolsMitigation.Close()
		}
		else
		{
			$failedData | Out-File "$logDirectory\jobresult_failed.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine data transfers failed: $failedData")
			$formVMToolsMitigation.Close()
		}
		
		$files = Get-ChildItem -Path $logDirectory -Filter "*.xlsx"
		
		if ($radiobuttonModifyACLs.Checked)
		{
			$archiveName = "ModifyACLs_$datetime.zip"
		}
		elseif ($radiobuttonRunFullReport.Checked)
		{
			$archiveName = "VMToolsReport_$datetime.zip"
		}
		
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose -Force
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
	}
	catch
	{
		try
		{
			Stop-Process -Id $waitProcess.Id
			[System.Windows.Forms.MessageBox]::Show("Unable to update virtual machines.")
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show("Unable to update virtual machines.")
		}
	}
}

$checkboxSelectAll_CheckedChanged={
	
	if ($checkboxSelectAll.Checked)
	{
		for ($i = 0; $i -lt $listboxVMList.Items.Count; $i++)
		{
			$listboxVMList.SetSelected($i, $true)
		}
	}
	elseif (-not $checkboxSelectAll.Checked)
	{
		for ($i = 0; $i -le ($listboxVMList.Items.Count - 1); $i++)
		{
			$listboxVMList.SetSelected($i, $false)
		}
	}
}

$comboboxDatacenter_SelectedIndexChanged={
	
	# Clear the items in the VM folder combobox.
	
	$comboboxVMFolders.Items.Clear()
	
	# Here, we determine the built-in 'vm' folder's ID so we can exclude it from the list.
	
	$parentID = ""
	$folder1 = Get-Folder -Type VM -Name vm -Location (Get-Datacenter $comboboxDatacenter.Text)
	
	if ($folder1.ParentID -eq (Get-Datacenter).Id)
	{
		$parentID = $folder1.Id
	}
	
	# Now, let's grab all the folders and list them (excluding sub-folders).
	
	$folders = Get-Folder -Type VM | ?{ $_.ParentId -eq $parentID } | Select Name | Sort-Object | % { $comboboxVMFolders.Items.Add($_.Name) }	
}

$comboboxVMFolders_SelectedIndexChanged={
	
	$listboxVMList.Items.Clear()
	
	$vms = Get-VM -Location $comboboxVMFolders.Text | Where-Object { ($_.Guest.ToolsVersion -like "*10*") -and ($_.GuestID -Like "*windows*") -and ($_.PowerState -eq "PoweredOn") } |  Sort-Object
	
	if ($vms)
	{
		Update-ListBox -ListBox $listboxVMList -Items $vms.Name
		$checkboxSelectAll.Enabled = $true
	}
	else
	{
		$checkboxSelectAll.Enabled = $false
	}	
}

$listboxVMList_SelectedIndexChanged={
	
	$buttonAddVirtualMachines.Enabled = $true
}

$buttonSetUpdateCredential_Click={
	
	$message = "Enter the LOCAL administrator account that will be used to run commands on the selected VMs."
	$global:updateCred = (Get-Credential -Message $message)
	
	Enable-UpdateButton
	
}

$radiobuttonModifyACLs_CheckedChanged={
	
	Enable-UpdateButton
}

$radiobuttonRunFullReport_CheckedChanged={
	
	Enable-UpdateButton
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
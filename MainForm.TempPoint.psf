<File version="3.1">
  <FileID>d7e5f40a-ca10-480f-b3f8-626d6af3434c</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJewSURBVHhe7L0HeBTpma6Nw9q73vXax95d/949
a3uPwziOvQ4znrE948l5mCHnDCJJIgihhCJCSEIJhCICJRRQzjnnnHNqde5WzhGe/6vqFghGMAFB
0+K9uZ6LrhxaVe/9VVV3ryIIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI4tES/6UvfanpG9/4RtPH
H33UpHdUr0lPT5/9T6FQKBQKRSvC6vahgwea/vM/v9/0la98pYnVdi4P5qtf/WrPs8/+BoaGRohJ
zkJjpxxtvf1oFfRRKBQKhUJ54tPP1+2K+nZcvOSBV/7+d7BGPdRl/v584xv/1HTq1GmUNXSjuFmC
7OpOZFdRKBQKhfJkJaemC3l1Pchf5nDzvbOMbuTV9ixrclmyq9XLYDU2r7Z7yfV4mOSyeebWCVDf
3Yer14Lwg//+708XgI9Wr26KjE9HaYsUOWzFcikUCoVCecKSV8sKaGU7ItMrEZ5Shhsp5csQNp/U
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
SUVORK5CYII=</Preview>
  <Form>yyw11vgCNWoAACODCAAAAAAABADtnFlz2kjXgO9d5f/Al4v3xpkxwhLLvJNUad8FkhACbqaEJCShfQEJfv3X
AjuxY8CCSTyeqjdJJcGou885/ZzTpxf1n8PFyjaL/OvtTav15+FDq9gm9pdP6jYv7PB33YusuMx/
p+IsPPz9uXXsq8+tiZ3lXhx9gX9v178/t/B1UKwz+0tkr4vMCD63RutF4Jm8vR3Hvh19WfR6BmIi
XWjwANvt/uBTKzJC0PIS1DcRx3Ec5KJXeI5RgGo/tUzXC6wMlPuEx1GRgW8/7cUGgo+yOLGzYvtY
AWqadlJg66IA5R6fAU8p9tIG5U378bHF/gHKi7zc/dS6f6rs/qm2U7Wvi1g1jcAmvNCOapWBIN3P
LeiheVExtuxPXymgx5tlcANIHDRU5vDwBcrggWdHhertgDjd/uBzC0aQNwvVHY7FmWVnarENakW8
yrYIzwhi583ColF5IWgPiytQ0Ahy+80iEvj709ejWLxZVi2MrBjFubeH6CsOtAVim5ltv112bFfF
p68TsbVvtHWuVXIDKn4sJsSGdULcv+rv/rzfP/1U9G2vO3T+L/e7lwiddrcjXEemG2efvmIxqAEE
CMVz3Ndkvy53QEaxcyAx6Jt9yw2KCbF5iAlfkQ4EkO20GxQ6QPRcxwaFDo7RQz63Oq+9+wgwxoKN
LBuADTd5eo/Xf4ww+W9jgbTcxuMwAeovAruuQLFBg5kXOZ++jrP1a186WsXEy9dGsHdezDB9PA7q
3jta/s/7A58flNZa/L/HqmAvm6D6nTno4RrkakF/JXBQc+CC4r+tPXUNZXp35n6Ip2CMAp38zI5/
7X/yQxj92Jw+ZRnvH1WH/EV0d9uda/A+6PcrAW/09PeI2ligD0X3Qeqfwzcw3SNjv5zxwliYh6Z0
b2dk1nWcj+Pkc+t5WG6O/MvoDHUa0/uj5E0ItgNgedt65LKJpzzm110YuFa7iXDfsT9a/XN+DuLs
cf1Rmb++ffeSpR9qIOz8TB3Pvn1VSyMIR4ZjvweBCWhHLewEOk/fOXhA/3SOdc8Zer612qjYyLCs
vZkBpY9/GpV7BAgB08yHXrdRkfMInYqdtSotqPVba3OYKbWE2PFez3d+RhRsxI9gLOxfH7+CupVG
7JyY0++756Sex2bQETC26JlZnMfLoqUaUd5SwaizrKNXAiJfXhvxCxYHx0LSeYoBJIOGhQ4Yf1e/
YbGDvnAPmLxzbKZznsd+0xLPiPyjRe5x3Mbr7BubuZ1twD9GZLXAhN4CPwSZT94q4laSxaZtW783
bOmKHODViNw0IILasbj65UhvzL2N6uYWcXUd1rVNArt4XK1CkwRYpaFFnxdXQZ+ZoAJ8nYOh/fDp
YqihLsAavozrlza4iG2oCwG2j0fOc2wfj80/DLi1QLhrRI5t/SjkX8+++3G4vRa5d4yhk4NnUjIh
DTN2hFoAuXcKqS/iH3J8FD8bAI/JfhkzSJ179i5m5vWC64kS+3j4FPxqOVtx1mJHrb2oef7Hx4t2
IyN6B/SSupUrhu4XyPQvQ+bQ5kV8PNSLlZ1+4+HvGyAnkfpQvj/kG2ZQVzr8qSwKsOyZhwxKVIED
tn+HOkijFOrozob9mLXSR7cI3kYJGvTqvaBTadHZEPRowsZFDzbr9M+kYWeXVE6heCr2DPn/a1zi
qihzrCIwqairOLVZ9FjodXj6aP4BnCGq59FxpBZGsc6luMDf0Vl+WCJ5OBVUzgJ6TIcLaYV6/TOj
5KV7Kudo/S5s6yDtHy0gb+vxx3bzqHAlyv8CJoFmWf2x7scns/xzTLZP5dtnmTymw6VMPlzL5PHl
m9NMPgn7PxRPTB3U/Zz+sS//MRS7zUfG1zOIFypcSmK3cyWJp9LXt+YRB2n/x+Or5UC7mKiJa4OE
8Nva0jvySMT1rhDlBcdOBbyFMND9qlB6TOdLAe70rgS4edr7uDBoF63NQdrWd3Hzj4ruu2437xdL
nxnlGnDJyACGsc7n3W+O6RdH0uMKXEohBJ/YYH6LwuZ+c6DwsCz9jvz9jI2XfS0nN6F/tP2x7eiT
vnDlOpFn1rS/x8J4cmhqEVf1Wbza2pevTzY8mHGsLBsajv3K9TAvMrLtV6Ud0EMicFkUddCRiKKj
+/v7EkVRcUFXsUq6gtEpktQIV7OOFMz1SQH+Mxz7iLDtbzDYZhyZxNDDr9ub/T84c4+3EWpCSYQ8
wSjRg0u0JOtv3Hs3Icxw4lr0xGcZK7Fox5npIKDS1Wamy2tDR8JFibp3sszd3uBOXVu5r3QvH4qS
SEWwqh64QEEJ6XCCq6qW4pSTGGJxea5ouVcyyZgbw15cSmp/s9U7nolT3dsbv8+IIubjJJH71Rgj
0Hm5Rn0/ZZcVK29dTMaoDSqrBDsWkQmhd6cSCfOGI7ldzCntbjsPZQ17sGBlB81vbzA0iShUJay2
67ku1MF8cuCvUG4SbM0p6/RwmaXQrhpEXL+XGOlC5T0+Ttd5tBCtkMA7xVQOfM3debNie3ujjyt2
ue1iZF/nCmTGbRLO21SSQYcCM25PoqGjzpZtaz5Ve+jISrCH9kCJmCGNOEQ6pQXCwGGkR0C7+f3k
/vYmCodivzP1GEWY8S4/guJ5iBJW3QV7yx6za9fd23WeDDMpgQJaUoBdE0K7vYkDli4RRZu5LrP2
U2rdJ/KM3KaRPnbpDRq6k6CwsU28SsYEgWkkS5UihSloiPmqM8wwah47OKqWGEHObm/u8bnq9GiV
bDsqvpIxcUK3Ow+Vjrl+gEYxabkyudxKqcia/MpV8hVpRfYOu0Nhv++MS86l1p4OW7E/9QIgm2Yn
oCeQ1OCTpHvHxD1D1xG4DHrxYkPabV9Zx0mA03ZSqlVnxW1Shgzpolu6XEInSw5nwmEsMbzBVIAQ
SPdUZdAh4WBBxekd1pWJYm0XpoGNIr17N+yVBJOwHj9QjQmP0M4EgR+K3cqhTccFVnxh24MvPFm3
V1tX9avausiOYiRdsVzVm8QTgckTRRPjrWb4W9Luj8YjHB3rAxSCyba2WaO8KKGAN36mzXEPE9eY
4asyT/fpDrXT9LjqoFqBypSJ8cFEjgVHVuy5Kwc4y9m5PGURrI1jkSYOKxFk3zG+HOMk4A3LORCx
xyIqBVYFIRid9zGkDPD5YBR3h5xfhkoSpX4ardXM2KZLPkwTwVjFno4wXNqjBIjOOqEomjwgRGQ9
zmHtcNur5gWXj8NchCvG4zcIL+LTdLnVcI6Mo+lI6mTokEXDfIk9rEcxyt/d0Xcl3Let+Yi/E7uu
ALw+kR24D9vRlLVkSlWhdVdz/ZyUSBnYc+mTuBzXps0PsWZvYxQbmvKWDBOaF9Kdbs6ViSZH85kD
+tTAVLdDaxOSlTuGPCRBiyYBR0Wi+3N5BXGsN2djh6CoLcO2tUouqbUjqkOKHXHLYjlByXguYAtT
ICn39iaQvZROoIkFwW1U8wNNerBxFIFwiNTFHbDwDsew0K8m7ITBdOuBYYIBJw9ZTrXUiGuPCR53
8VLjVrEu3t6MDDoleCOKjFyMu3okIt2OgsyC9Vwp11m7TJx0TvYkXgvvKEkZse4K4yp+Xtj6msVE
Cd4pIjth3eXSdOLbm1WJUxDU8+AoEKIZsisUIY+G/p0xuYu5WW/SC3vdkeWrcJHxpuW052a7GJu8
r6Cv7Qro/WZZGFjWT/h0le5UM1GMiT+d6zJZeWEJYSoOHD4gYjdbFl0z4XEfqTwLESVubKCsb/s8
LfuAty3P+BuXz5UeqoRe4aMzYqawC01W5JWOlZyyw11vgCsBZs4gTYKd9v1EwtpoYG5MdMYo2/nI
ImVqNumbtzdmqSCMXpFcuzMLFVGIOKjCZ0l7hnhWIq/dOAlDvMM78Yo3ck0mfAST0LIUh25HKZQU
Wcvr0ZynWU5m6dsbMDjRyy7b5qZigvfxnj/VCYyVKLFSYYIXUX2io/QsRy0p1ZG1oVS+ynPDOW9o
D8VoiM1hYs13BHTscC7QdMSJIEzxuEWttiOGjPiKwgmXrEdFBEN9vraucBgundrGKDrekaLLgYiS
dPNOxPog3nId3QfYAl/wJ4qepnLmCiq5HohzjucHW2iepTN+oHt4EG5izaD6Diurkk1BZAaLEhXB
qqISqKJnMcqSYwfyJuWaAYTMMMifmVBYZutyyuMDJ8y5aeDRlXk39TR8sR1sLRfKh6ol+ok4xhJj
iu3ypRubSID06RABiQ5qzF1jCLw+XfmEg+sSg2oCXg4FYxzu8tKwyNRx5NJh1nLOsPEcZ2RRlB2Z
Xi8mpFkNRxRqigQ609A+YuuAhqWqyGCst0zRbu/sEYSiW6cUAq4YScBU0AAoYo122FBXQ2iRcZgH
I3msoDoIB34ms1tfdeVBOXEZvMRlvLZzPToftXT20tIpNac6ExbTXS3nDJDDpRoeY+kd2YOATPY2
1caxAHyhN6moNkdsWdm9FyeTkVhAJD4PluZqzg1Clo+NcQCJChsgMYxr/HRYhtsMZyOcT0292BiW
0FFn7hZVtxJxe8O116yniMSKbVPWQ/veYzsaitCqimjEqhN0pTh1hg5wARD0MGdGLdsUkfIOE23n
g+G0z2TOjLGYxGRkTbi9maJqJ+UTUlKcno2KAuB3jBlepc0oYIKdjqIR+BklTCoBYC3weGnwY01w
yHIhoLDLFUNfxaSUHY8fqtsb0lkKCVbsyPuVtxbasEIDEUrdVV0F5HkVg53JIHqHzExNQWaWbDn+
9sYFo1ygovUoh+t+l+MDNEWNjTscaL7G5GlAdgE4kKlYuNz3SHa5oybjnWCB3GE+fWA76nLu4Snt
I9YYjFkqZxtDNMCDXc7laelxpZdGVLboROrAD1nTIfOVvLUEjw0Y2wUJ4spgVzt3YMehupord16S
BzqrCKgjgl4YKh1imPKxM8YGCa5xmOEQ2FTpTrE2ifksmxtKTtOiiFYxAXqBGfOcp81ImkB3DD4g
UdzUaJ91qJ1TgtG5LecqZk4ZT94MSwekWuWSyts5sStgtYvxcDUDzjLcRe11RNnYboh5KzaECCd0
kBkllzkurhIo5vrClt3H3pOxoryU4NubmuGfRTDoBcDwnmDN6tJ0Tas3GjJQ15vzUsB0+XCrU0PH
YVyS3NQxF21LAxrLSbxrhG40McnS2BCosaNLFvSCwUBeYswETBvjtCMTaF+ymF2bSlLQL2UupOii
JphFYUrnLVGgrRlNOpnhOYtxe8iOMdNB5HI0hishu71RhnOhi65ldKSpvUUlJLHuWbM2V1QCw7tA
GA4bM86It+pU4rSN91ECyHZhnDhn49ubS+PENxuD6EpwuOJNYwhP6CnB1bF3NbubecmAcMcxh8IK
JpTA88sJsVScBYYaaRrPoSkmMnmZM0VVULWdUyOmJQdlKyVZUKizHMlqmiwcMAJiqUZAJTa1wSAK
obM5NOC44cxhIL5EYQ3byOVUw6pROiEGwkO+SDqY5HeqzYYacdadSOFSlwFhgHckMJkDvsAX5Lk4
0cVexolzUeL2plmcmLGEaKAUiBN1lCAJlBWrGZVmQ82QdJiEh4uZiU9Bn3rYhHQ0wW5LnFFVxczP
V25HEvw5qzoEGMGZwvUTDQ717iJQvFk4HwYuzOk+kbJCqdFYRHbHM3KBO/bm9iZrS5DDwGjRcxhP
SShDkLIs7TPAyhzaa6N6JbMMdLfJZ2DA283lET6Y4JJP6JpL+2sSGVWcVHoaD2tLEMl3w4CA9c0O
ZUBHDaJq5CHW3WqmpUvUdbf+kCo53TuSq33L1EYoyNSCREujFNRmmJ4ag1xtoomUQallkAxxU5wF
ZLY3rhhJghT3+Xyei3O24EiWYCnVF2g5lseSy+aU7Spl2cFlAURyql3MaH6mOndbJ5+zaynl/Jx3
FkuHBXMrKe6YLJgbTyDsgd1IHjaTZINQx8XSdas24HIEMmvObt8tQtgBo/PEMek4HZrRKlylhGpF
rkPGRmjm8/V0CBm6vO3zaDlE1+PZjC69Xom4d3zWVrm+SHluIi2qO5jM0h42w9ZA09zyGGiFo7tY
XQbtbOJl0kKZBhgWCNM7bNSecgI6ondjH12jw3TR1scIyvSGpoWHCNYfO0qpKjzLyIUBegEvHajO
iIcl+uzXly9/3j8umLxcjLrwnBgyQD63HuCmh/wez/38uHx00RGgbv/M3tLpRcmmxx5BCbWIkzeO
Slx+vuLVot7rH3zIVwE6/8irAM2K/SOvAjR7S+HZwetO67fWRGw9vkhy5M3nY+V/yZsACvC2+J02
UbK6rcNiuAKSxHUQKHYSZ8XfOWLY6dXvjZ48H3wUqlNyXHgstXPVMf2TJ4RORp0LTuseEKPtovXt
9frH3ju1gfKztu9+wubJy60T1zZ92/p2nvtUn/318sGfdbj7H3ILMba85RbFhQZbi2/4xIUHb48K
cZlDtOHrHKKp817vEAeNWheo9C9wg+/d9It84F231lW70BLLKC46FnImCX2A65Nvp7aqz+2RH5Hk
Mj+A6hyiqfc984PGr8V8O6dxkLN1saAfhu7n++NH7H5qi/xfwDMYpC7n95kJlZOnxa46UHLmRD4K
MtCNjRtJ7Tk1DJfP+GpnO3k0/5yvAStd7ltIU69+doqv8VRv71vNxfrVnnS2T0+6EpD/57qO4OXv
8nplANpZxNVEPESCutnLvagWyijqN+u/ucZVL7zB7fqkFXLZQsYRDS4ivAP36ily45fXviN+fP3j
X9Lf/2xP18fUL3wJ9oXkTXv4abp/ePNXBEbzyKqoI0bTYP8ECXwlJCcnn6/vvni8iuNb6vlC47+O
PfOzos0+nX0P/My6IaDTQRk0uCLlvGr0fUkedBl5r4S+CJ0+GEA7F8y4nsBpXOQxOa1lazUX7sNk
pD/Mt14Z+xfNtYDyi/hdkK8bAgoRRmEcXpG/nHkCfCTiMnq8pvLp4wWR8GcF7isW/14b4LIMtDcA
DtT0DeVnDnQyPX478r4W+ZeG33d8G+TvUPg3rzPoX0COaGSOVx+9/9wCGkOnXwM58xLIlbx1r7v8
4OQh/ePx+rtwH/C2g/d8W06k4sD6Z2jsN51A/wwanxS9iEVkcB2LjdfCni4GPsj2AVF892H6qZ+u
2A/4WKP0hdsRr/T/hYO0GmfFhbo9g/tkK83H9W9K/tJh/V2XPwm7vqIKKJbFoby211dcV/Q3Z1ad
Xr2Q0m0KwfNVyVfCX7gPBqwHX34apfE0cB8mW1UY/JEnYNT+8inJ7P2dbYdLiH/77fbmoEG9CbwE
OrQuUeLDzMSeL2i+6pF/8c4AalkTLyuAaUQD+ERkXxHbf4ZvQI0Tjue+8Vr6y52j8TViz5zjotsN
jzvHb7/9xyn+e3sDVGg96tC6UIkP6Ryvu+QnL/6/72Whb54u+0nJ9y+9LLTO5y/Pyk8fczu5Ety5
7tBF8zT+2aG1Px4PrIFxZX8daLg/gfCuWfqP93V/7OvppX0weo/L6Z/tWsHta26al45v/B6n7op7
5htdz/39nvlanFYdrhsU+1BXzdeCv3nR/LMPT//Nv/4/ogsTrzVqAAA=</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabpageStep1)
	{
		if (-not $global:vcenterConnection.IsConnected)
		{
			return $false
		}
		else
		{
			return $true
		}
	}
	elseif ($tabPage -eq $tabpageStep2)
	{
		#TODO: Enter Validation Code here for Step 2
		if ($listboxVMUpdateList.Items)
		{
			return $true
		}
		
		return $false
	}
	#Add more pages here
	
	return $false
}

function Enable-UpdateButton
{
	if ($radiobuttonModifyACLs.Checked)
	{
		if ($global:updateCred -and $listboxVMUpdateList.Items -and $radiobuttonModifyACLs.Checked)
		{
			$buttonRun.Enabled = $true
			$buttonRun.BackColor = 'Green'
		}
		else
		{
			$buttonRun.Enabled = $false
			$buttonRun.BackColor = 'Red'
		}
		
		$buttonRun.Text = "Modify ACLs"
		
		$comboboxVMFolders.Enabled = $true
		$comboboxDatacenter.Enabled = $true
		$labelStep2.Text = "Step 2: Select VMs to modify ACLs."
		
		if (-not ($comboboxVMFolders.Items))
		{
			# Clear the items in the VM folder combobox.
			
			$comboboxVMFolders.Items.Clear()
			
			# Here, we determine the built-in 'vm' folder's ID so we can exclude it from the list.
			
			$parentID = ""
			$folder1 = Get-Folder -Type VM -Name vm -Location (Get-Datacenter $comboboxDatacenter.Text)
			
			if ($folder1.ParentID -eq (Get-Datacenter).Id)
			{
				$parentID = $folder1.Id
			}
			
			# Now, let's grab all the folders and list them (excluding sub-folders).
			
			$folders = Get-Folder -Type VM | ?{ $_.ParentId -eq $parentID } | Select Name | Sort-Object | % { $comboboxVMFolders.Items.Add($_.Name) }
		}
	}
	elseif ($radiobuttonRunFullReport.Checked)
	{
		$buttonRun.Enabled = $true
		
		$buttonRun.Text = "Run Report"
		$buttonRun.BackColor = 'Green'
		
		$listboxVMList.Items.Clear()
		$listboxVMUpdateList.Items.Clear()
		
		$comboboxVMFolders.Enabled = $false
		$comboboxVMFolders.Items.Clear()
		
		$comboboxDatacenter.Enabled = $false
		
		$labelStep2.Text = "Step 2: Run report against the logged on vCenter."
	}
	else
	{
		$buttonRun.Enabled = $false
		$buttonRun.BackColor = 'Red'
	}
}


$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$formVMToolsMitigation_Load={
	Update-NavButtons
	
	[bool]$nonNumberEntered = $false
	$Path = $env:TEMP
	
	if (Get-Item "$Path\VcenterHistory\vcenterhistory.log")
	{
		$autoCompleteArray = (Import-Csv "$Path\VcenterHistory\vcenterhistory.log").vcenter
		
		$vcenterTextbox.AutoCompleteCustomSource.AddRange($autoCompleteArray)
	}
	
	if ($global:vcServer)
	{
		$vcenterTextbox.Text = $global:vcServer
		$vcenterTextbox.Enabled = $false
	}
	
	if ($global:vcCredential)
	{
		$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru
		try
		{
			$global:vcenterConnection = Connect-VIServer -Server $global:vcServer -Credential $global:vcCredential -ErrorAction Stop
			
			if ($global:vcenterConnection.IsConnected)
			{
				$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
				$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
				$labelConnectionStatusNotC.Text = "Connection Status: Connected"
				$labelOKStep1.Visible = $true
				
				$buttonEnterCredentials.Enabled = $false
				
				$rootDCs = Get-Datacenter -Server $global:vcenterConnection.Name | Sort-Object Name
				
				$rootDCs | Out-File "$logDirectory\dcs.log"
				
				foreach ($root in $rootDCs)
				{
					$comboboxDatacenter.Items.Add($root.Name)
				}
				
				Stop-Process $waitProcess.Id
				$tabcontrolWizard.SelectedTab = $tabpageStep2
				Update-NavButtons
			}
		}
		catch
		{
			Stop-Process $waitProcess.Id
			[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
			$vcenterTextbox.Enabled = $true
			$buttonEnterCredentials.Enabled = $false
		}
	}
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

$buttonEnterCredentials_Click={
	
	try
	{
		$pictureboxLoading.Visible = $true
		if ($global:vcenterConnection.IsConnected)
		{
			Disconnect-VIServer -Server * -Force -Confirm:$false
			$labelVCenterServerNotConn.Text = "vCenter Server: Not Connected"
			$labelUsernameNotConnected.Text = "Username: Not Connected"
			$labelConnectionStatusNotC.Text = "Connection Status: Not Connected"
		}
		$connected = $false
		$global:vcCredential = $null
		$global:vcenterConnection = $null
		$global:vcCredential = Get-Credential -Message "Please enter your vSphere credentials." -ErrorAction Stop
		$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru
		$global:vcenterConnection = Connect-VIServer -Server $vcenterTextbox.Text -Credential $global:vcCredential -ErrorAction Stop
		$buttonEnterCredentials.Enabled = $false
		$pictureboxLoading.Visible = $false
		
	}
	catch
	{
		"Unable to connect."
	}
	
	If ($global:vcenterConnection.IsConnected)
	{
		$labelVCenterServerNotConn.Text = "vCenter Server: $($vcenterTextbox.Text)"
		$labelUsernameNotConnected.Text = "Username: $($global:vcenterConnection.User)"
		$labelConnectionStatusNotC.Text = "Connection Status: Connected"
		$labelOKStep1.Visible = $true
		$vcenterTextbox.Enabled = $false
		
		$Path = $env:TEMP
		
		if (-not (Get-Item "$Path\VcenterHistory" -ErrorAction SilentlyContinue))
		{
			New-Item -Name VcenterHistory -Path $Path -ItemType Directory
		}
		
		if (Get-Item "$Path\VcenterHistory\vcenterhistory.log" -ErrorAction SilentlyContinue)
		{
			$vcHistoryArray = Import-Csv "$Path\VcenterHistory\vcenterhistory.log"
			
			$vcHistoryArray = $vcHistoryArray | ?{ $_.vcenter -ne "$($vcenterTextbox.Text)" }
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		else
		{
			$vcHistoryArray = @()
			
			$object = New-Object PSObject
			
			$object | Add-Member -MemberType NoteProperty -Name vcenter -Value $vcenterTextbox.Text
			
			$vcHistoryArray = [System.Array]$vcHistoryArray + $object
			
			$vcHistoryArray | Export-CSV "$Path\VcenterHistory\vcenterhistory.log" -NoTypeInformation
		}
		
		$rootDCs = Get-Datacenter -Server $global:vcenterConnection.Name | Sort-Object Name
		
		foreach ($root in $rootDCs)
		{
			$comboboxDatacenter.Items.Add($root.Name)
		}
		
		Stop-Process -Id $waitProcess.Id
		Update-NavButtons
		
	}
	else
	{
		Stop-Process -Id $waitProcess.Id
		[System.Windows.Forms.MessageBox]::Show("Unable to connect to $($vcenterTextbox.Text). Please try logging on again.")
		$labelOKStep1.Visible = $false
		Update-NavButtons
	}
}

$vcenterTextbox_TextChanged={
	
	if ($vcenterTextbox.Text -ne "")
	{
		$buttonEnterCredentials.Enabled = $true
	}
	else
	{
		$buttonEnterCredentials.Enabled = $false
	}
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

#endregion

$buttonAddVirtualMachines_Click={
	
	$checkboxSelectAll.Checked = $false
	
	# Check to see if all items are selected. If SelectedItems property of the listBox is blank, assume all items.
	if ($listboxVMList.SelectedItems)
	{
		foreach ($item in $listboxVMList.SelectedItems)
		{
			if ($item -notin $listboxVMUpdateList.Items)
			{
				Update-ListBox -ListBox $listboxVMUpdateList -Items $item -Append
			}
		}
	}
	else
	{
		foreach ($item in $listboxVMList.Items)
		{
			if ($item -notin $listboxVMUpdateList.Items)
			{
				Update-ListBox -ListBox $listboxVMUpdateList -Items $item -Append
			}
		}
	}
	
	$buttonDeleteVMFromQueue.Enabled = $true
	
	Enable-UpdateButton
	
	Update-NavButtons
	
}

$buttonDeleteVMFromQueue_Click={
	
	$index = $listboxVMUpdateList.SelectedIndex
	$listboxVMUpdateList.Items.RemoveAt($index)
	
	if (-not $listboxVMUpdateList.Items)
	{
		$buttonDeleteVMFromQueue.Enabled = $false
		Enable-UpdateButton
	}
	else
	{
		$listboxVMUpdateList.SelectedIndex = 0
	}
	
	Update-NavButtons
}

$listviewVMsStep2_SelectedIndexChanged={
	
	$buttonDeleteVMFromQueue.Enabled = $true
	
}

$buttonRun_Click={
	
	$waitProcess = Start-Process -FilePath "$ScriptDirectory\Plugins\WaitPage.exe" -PassThru -NoNewWindow
	
	$datetime = Get-Date -Format "MMddyyyy_HH_mm_ss"
	$userName = $env:USERNAME
	$archiveName = ""
	
	try
	{
		$vmList = $listboxVMUpdateList.Items
		$vmList | Out-File "$logDirectory\vmlist.log"
		
		if ($radiobuttonModifyACLs.Checked)
		{
			foreach ($vm in $vmList)
			{
				while (@(Get-Job | ?{ $_.State -eq "Running" }).Count -ge 25)
				{
					# We're going to iterate through the running jobs and kill any that have been running for X minutes.
					# This block is ignored if there are less than 5 total builds. We'll handle that part later.
					
					Write-Host "Waiting for open thread...($NumJobs Maximum)"
					Start-Sleep -Seconds 2
				}
				
				Start-Job -Name $vm -ArgumentList $vcenterTextbox.Text, $global:vcCredential, $ScriptDirectory, `
						  $logDirectory, $vm, $global:updateCred -Verbose -ScriptBlock {
					
					Import-Module VMware.PowerCLI
					$connection = Connect-VIServer -Server $args[0] -Credential $args[1] -ErrorAction Stop
					
					Invoke-VMScript -VM (Get-VM $args[4]) -GuestCredential $args[5] -ScriptText {
						if (-not (Get-Item -Path "C:\Scripts"))
						{
							New-Item -ItemType Directory -Path "C:\" -Name "Scripts"
						}
						
						if (-not (Get-Item -Path "C:\Scripts\vmtoolslog"))
						{
							New-Item -ItemType Directory -Path "C:\Scripts" -Name "vmtoolslog"
						}
					}
					
					Invoke-VMScript -VM (Get-VM $args[4]) -GuestCredential $args[5] -ScriptText {
						
						$scriptString = '
				
						$domain = $ENV:USERDOMAIN
						$dir = "C:\ProgramData\VMware\VMware CAF"
						$logdir = "C:\Scripts\vmtoolslog"
						$compName = (Get-ComputerInfo).CsDnsHostName
						$acl = Get-ACL $dir
						$acl.SetAccessRuleProtection($True, $True)
						Set-ACL -AclObject $acl -Path $dir -confirm:$false
						
						$acl2 = Get-ACL $dir
						foreach ($access in $acl2.Access)
						{
							foreach ($value in $access.IdentityReference.Value)
							{
								if (($value -eq "BUILTIN\USERS") `
									-or ($value -eq "$domain\Users"))
								{
									$acl2.RemoveAccessRule($access)
								}
							}
						}

						Set-ACL -AclObject $acl2 -Path $dir -confirm:$false					
						'
						
						$scriptString | Out-File "C:\Scripts\ModifyACLs.ps1" -Force
						
						Set-Location -Path "C:\Scripts"
						
						if (-not (Get-Item -Path 'C:\ProgramData\VMware\VMware CAF' -ErrorAction Continue))
						{
							mkdir 'C:\ProgramData\VMware\VMware CAF'
						}
						
						(Get-Acl -Path 'C:\ProgramData\VMware\VMware CAF').Access
						
						# Specify the account to run the script
						$User = "NT AUTHORITY\SYSTEM"
						# Specify what program to run and with its parameters
						$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-NonInteractive -NoLogo -NoProfile -ExecutionPolicy Bypass C:\Scripts\ModifyACLs.ps1"
						# Specify the name of the task
						Register-ScheduledTask -TaskName "ModifyVMACLs" -User $User -Action $Action -RunLevel Highest –Force -ErrorAction Stop
						
						Start-ScheduledTask -TaskName "ModifyVMACLs" -ErrorAction Stop
						
						while ((Get-ScheduledTask -TaskName "ModifyVMACLs").State -ne "Ready")
						{
							Start-Sleep -Seconds 1
						}
						
						Unregister-ScheduledTask -TaskName "ModifyVMACLs" -Confirm:$false
						
						(Get-Acl -Path 'C:\ProgramData\VMware\VMware CAF').Access
						
					}
				
					Disconnect-VIServer -Server $args[0] -Force -Confirm:$false -ErrorAction Stop
					
				} # End Start-Job block
				
			} # End foreach loop
		} # End IF statement
		elseif ($radiobuttonRunFullReport.Checked)
		{
			Get-VM | ?{ $_.Guest -like "*windows*" } | Select-Object -Property Name, @{ Name = 'ToolsVersion'; Expression = { $_.Guest.ToolsVersion } } | Export-CSV "$logDirectory\VMWareToolsReport.csv" -NoTypeInformation
		}
		
		# We'll kill any jobs that have been running for longer than X minutes.
		# For each job returned that has not completed, we'll check to see if it has been running longer than X minutes. If it has, kill the job.
		do
		{
			Start-Sleep -Milliseconds 1000
			
			foreach ($job in (Get-Job))
			{
				$runTime = ((Get-Date) - $job.PSBeginTime).Minutes
				if ($runtime -gt 30)
				{
					try
					{
						Stop-Job $job.Name -Confirm:$false
					}
					catch
					{
						"Unable to stop job."
					}
				}
			}
			
		}
		while ((Get-Job -State Running).Count -gt 0)
		
		# Get the completed jobs.
		$jobs = Get-Job | ?{ $_.State -eq "Completed" }
		
		# Get the failed jobs.
		$failedJobs = Get-Job | ?{ $_.State -ne "Completed" }
		
		# Output the job results to a separate log file for each VM.		
		$data = @()
		
		foreach ($job in $jobs)
		{
			$data = Get-Job $job.Name | Receive-Job
			Remove-Job $job
			
			$job.Name | Out-File "$logDirectory\$($job.Name)_jobresult.log"
			$data | Out-File "$logDirectory\$($job.Name)_jobresult.log"
		}
		
		$failedData = @()
		
		foreach ($failedJob in $failedJobs)
		{
			$failedData += Get-Job $failedJob.Name | Receive-Job
			Remove-Job $failedJob
		}
		
		Stop-Process -Id $waitProcess.Id
		if (-not $failedData)
		{
			[System.Windows.Forms.MessageBox]::Show("VM Tools mitigation steps completed.")
			$formVMToolsMitigation.Close()
		}
		else
		{
			$failedData | Out-File "$logDirectory\jobresult_failed.log" -Append
			[System.Windows.Forms.MessageBox]::Show("The following virtual machine data transfers failed: $failedData")
			$formVMToolsMitigation.Close()
		}
		
		$files = Get-ChildItem -Path $logDirectory -Filter "*.xlsx"
		
		if ($radiobuttonModifyACLs.Checked)
		{
			$archiveName = "ModifyACLs_$datetime.zip"
		}
		elseif ($radiobuttonRunFullReport.Checked)
		{
			$archiveName = "VMToolsReport_$datetime.zip"
		}
		
		Compress-Archive -Path $logDirectory -DestinationPath "$logParentDirectory\$archiveName" -Verbose -Force
		Remove-Item -Path $logDirectory -Recurse -Confirm:$false
	}
	catch
	{
		Stop-Process -Id $waitProcess.Id
		[System.Windows.Forms.MessageBox]::Show("Unable to modify virtual machines.")		
	}
}

$checkboxSelectAll_CheckedChanged={
	
	if ($checkboxSelectAll.Checked)
	{
		for ($i = 0; $i -lt $listboxVMList.Items.Count; $i++)
		{
			$listboxVMList.SetSelected($i, $true)
		}
	}
	elseif (-not $checkboxSelectAll.Checked)
	{
		for ($i = 0; $i -le ($listboxVMList.Items.Count - 1); $i++)
		{
			$listboxVMList.SetSelected($i, $false)
		}
	}
}

$comboboxDatacenter_SelectedIndexChanged={
	
	# Clear the items in the VM folder combobox.
	
	$comboboxVMFolders.Items.Clear()
	
	# Here, we determine the built-in 'vm' folder's ID so we can exclude it from the list.
	
	$parentID = ""
	$folder1 = Get-Folder -Type VM -Name vm -Location (Get-Datacenter $comboboxDatacenter.Text)
	
	if ($folder1.ParentID -eq (Get-Datacenter).Id)
	{
		$parentID = $folder1.Id
	}
	
	# Now, let's grab all the folders and list them (excluding sub-folders).
	
	$folders = Get-Folder -Type VM | ?{ $_.ParentId -eq $parentID } | Select Name | Sort-Object | % { $comboboxVMFolders.Items.Add($_.Name) }	
}

$comboboxVMFolders_SelectedIndexChanged={
	
	$listboxVMList.Items.Clear()
	
	$vms = Get-VM -Location $comboboxVMFolders.Text | Where-Object { ($_.Guest.ToolsVersion -like "*10*") -and ($_.GuestID -Like "*windows*") -and ($_.PowerState -eq "PoweredOn") } |  Sort-Object
	
	if ($vms)
	{
		Update-ListBox -ListBox $listboxVMList -Items $vms.Name
		$checkboxSelectAll.Enabled = $true
	}
	else
	{
		$checkboxSelectAll.Enabled = $false
	}	
}

$listboxVMList_SelectedIndexChanged={
	
	$buttonAddVirtualMachines.Enabled = $true
}

$buttonSetUpdateCredential_Click={
	
	$message = "Enter the LOCAL administrator account that will be used to run commands on the selected VMs."
	$global:updateCred = (Get-Credential -Message $message)
	
	Enable-UpdateButton
	
}

$radiobuttonModifyACLs_CheckedChanged={
	
	Enable-UpdateButton
}

$radiobuttonRunFullReport_CheckedChanged={
	
	Enable-UpdateButton
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>